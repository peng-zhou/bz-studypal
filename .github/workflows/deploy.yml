name: Deploy to Production

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  # Run tests before deployment
  test:
    name: Run Tests
    uses: ./.github/workflows/backend-tests.yml
    secrets: inherit

  test-frontend:
    name: Run Frontend Tests
    uses: ./.github/workflows/frontend-tests.yml
    secrets: inherit

  # Build and push Docker images
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [test, test-frontend]
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
      backend-digest: ${{ steps.backend-build.outputs.digest }}
      frontend-digest: ${{ steps.frontend-build.outputs.digest }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Backend image build
      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        id: backend-build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Frontend image build
      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        id: frontend-build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.backend-image }}
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Upload backend Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'backend-trivy-results.sarif'
          category: 'backend-container'

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.frontend-image }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload frontend Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'frontend-trivy-results.sarif'
          category: 'frontend-container'

  # Deploy to production
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: ${{ secrets.PRODUCTION_URL }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_SSH_PORT }}
          script: |
            # Navigate to application directory
            cd /opt/studypal-app
            
            # Pull latest images
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ${{ needs.build.outputs.backend-image }}
            docker pull ${{ needs.build.outputs.frontend-image }}
            
            # Update environment variables
            cat > .env << EOF
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}
            DATABASE_URL=file:./prod.db
            BACKEND_IMAGE=${{ needs.build.outputs.backend-image }}
            FRONTEND_IMAGE=${{ needs.build.outputs.frontend-image }}
            EOF
            
            # Deploy with docker-compose
            docker-compose -f docker-compose.prod.yml down --remove-orphans
            docker-compose -f docker-compose.prod.yml up -d
            
            # Wait for services to be healthy
            timeout 300 bash -c 'until docker-compose -f docker-compose.prod.yml ps | grep -q "healthy"; do sleep 10; done'
            
            # Clean up old images
            docker image prune -f

      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.PRODUCTION_URL }}/health
          curl -f ${{ secrets.PRODUCTION_URL }}

  # Deploy to staging (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment: 
      name: staging
      url: ${{ secrets.STAGING_URL }}
    
    steps:
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_SSH_PORT }}
          script: |
            cd /opt/studypal-staging
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ${{ needs.build.outputs.backend-image }}
            docker pull ${{ needs.build.outputs.frontend-image }}
            
            # Update staging environment
            cat > .env << EOF
            JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}
            REFRESH_TOKEN_SECRET=${{ secrets.STAGING_REFRESH_TOKEN_SECRET }}
            BACKEND_IMAGE=${{ needs.build.outputs.backend-image }}
            FRONTEND_IMAGE=${{ needs.build.outputs.frontend-image }}
            EOF
            
            docker-compose -f docker-compose.staging.yml down
            docker-compose -f docker-compose.staging.yml up -d

  # Notify on deployment
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy.result }}
          channel: '#deployments'
          text: |
            Deployment to production: ${{ needs.deploy.result }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Repository: ${{ github.repository }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL != null