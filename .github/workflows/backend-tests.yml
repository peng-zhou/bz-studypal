name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'

env:
  NODE_VERSION: '18'

jobs:
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma Client
        run: npm run db:generate
        
      - name: Run TypeScript type check
        run: npx tsc --noEmit
        
      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: "file:./test.db"
          JWT_SECRET: "test-jwt-secret-key-for-ci"
          REFRESH_TOKEN_SECRET: "test-refresh-token-secret-for-ci"
          
      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: backend/coverage
          flags: backend
          name: backend-coverage
          
  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    defaults:
      run:
        working-directory: backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma Client
        run: npm run db:generate
        
      - name: Setup test database
        run: |
          npm run db:push
          npm run db:seed
        env:
          DATABASE_URL: "file:./test.db"
          
      - name: Start server for API tests
        run: |
          npm run build
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 8000
          DATABASE_URL: "file:./test.db"
          JWT_SECRET: "test-jwt-secret-key-for-ci"
          REFRESH_TOKEN_SECRET: "test-refresh-token-secret-for-ci"
          CORS_ORIGIN: "http://localhost:3000"
          
      - name: Wait for server to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
          
      - name: Run API endpoint tests
        run: |
          # Test health endpoint
          curl -f http://localhost:8000/health
          curl -f http://localhost:8000/health/db
          
          # Test auth endpoints
          curl -X POST -H "Content-Type: application/json" \
            -d '{"email":"test@example.com","password":"password123"}' \
            http://localhost:8000/api/auth/register || true
            
  security-scan:
    name: Security Audit
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level moderate
        
      - name: Check for known vulnerabilities
        run: npx audit-ci --moderate
        continue-on-error: true
        
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma Client
        run: npm run db:generate
        
      - name: Build application
        run: npm run build
        
      - name: Check build artifacts
        run: |
          ls -la dist/
          test -f dist/index.js
          
      - name: Test production startup
        run: |
          timeout 10s npm start || test $? = 124
        env:
          NODE_ENV: production
          DATABASE_URL: "file:./test.db"
          JWT_SECRET: "test-jwt-secret"
          REFRESH_TOKEN_SECRET: "test-refresh-secret"