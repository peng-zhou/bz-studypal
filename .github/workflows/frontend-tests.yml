name: Frontend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-tests.yml'

env:
  NODE_VERSION: '18'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run unit tests
        run: npm run test:ci
        
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/coverage
          flags: frontend
          name: frontend-coverage
        
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    defaults:
      run:
        working-directory: frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install frontend dependencies
        run: npm ci
        
      - name: Install backend dependencies
        working-directory: backend
        run: npm ci
        
      - name: Setup test database
        working-directory: backend
        run: |
          npm run db:generate
          npm run db:push
          npm run db:seed
        env:
          DATABASE_URL: "file:./test.db"
          
      - name: Build and start backend server
        working-directory: backend
        run: |
          npm run build
          npm start &
        env:
          NODE_ENV: test
          PORT: 8000
          DATABASE_URL: "file:./test.db"
          JWT_SECRET: "test-jwt-secret-key-for-e2e"
          REFRESH_TOKEN_SECRET: "test-refresh-token-secret-for-e2e"
          CORS_ORIGIN: "http://localhost:3000"
          
      - name: Wait for backend to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
          
      - name: Build frontend
        run: npm run build
        
      - name: Start frontend server
        run: npm start &
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: http://localhost:8000
          
      - name: Wait for frontend to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
          
      - name: Run Cypress E2E tests
        run: npm run test:e2e
        env:
          CYPRESS_baseUrl: http://localhost:3000
          
      - name: Upload Cypress screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots/
          
      - name: Upload Cypress videos
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-videos
          path: frontend/cypress/videos/

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
          
      - name: Check build artifacts
        run: |
          ls -la .next/
          test -f .next/BUILD_ID
          
  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run TypeScript type check
        run: npx tsc --noEmit
